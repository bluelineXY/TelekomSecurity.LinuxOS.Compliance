---
# ------------------------------------------------------------------------
# Task: Telekom Security Linux OS Compliance
# SecReq: 05 Logging
# ------------------------------------------------------------------------

# ========================================================================
# Verification if playbook is started with '--check' option. If not throw
# error and end play!
- fail:
    msg: "WARNING: Playbooks for compliance checks must be started with '--check' option!"
  when: ansible_check_mode == false
# ========================================================================

# Req 52: Security relevant events must be logged with a precise timestamp
# and a unique system reference.

- block:
    - name: req-052.1 check if logging is enabled before auditd starts
      lineinfile:
        dest: '/etc/default/grub'
        regexp: '^GRUB_CMDLINE_LINUX=(.*)'
        line: 'GRUB_CMDLINE_LINUX="audit=1"'
      register: check_log_on_start
      failed_when: (check_log_on_start is changed)
  rescue:
    - debug:
        msg: "WARNING: Logging is not correct configured during system boot!"

- block:
    - name: req-052.2 check if auditd is installed
      package:
        name: 'auditd'
        state: absent
      register: check_auditd_installed
      failed_when: check_auditd_installed.changed == false
      changed_when: false
  rescue:
    - debug:
        msg: "WARNING: Auditd service needed for logging is not installed!"

- block:
    - name: req-052.3 check config for logging events
      lineinfile:
        path: '/etc/audit/audit.rules'
        line: "{{ item }}"
        state: present
      register: check_log_events
      failed_when: (check_log_events is changed)
      with_items: "{{ set_log_events }}"
  rescue:
    - debug:
        msg: "WARNING: Logging events are not correct configured!"
  when: check_auditd_installed.changed == true

- block:
    - name: req-052.4 check configuration of logging for apparmor
      lineinfile:
        path: '/etc/audit/audit.rules'
        line: "{{ item }}"
        state: present
      register: check_aa_log
      failed_when: (check_aa_log is changed)
      with_items: "{{ set_apparmor_events }}"
  rescue:
    - debug:
        msg: "WARNING: Log events for AppArmor are not correct configured!"
  when:
    - set_mac_logging == true
    - config_mac == true
    - use_mac_type == "apparmor"
    - check_mac.changed == false
    - check_auditd_installed.changed == true

- block:
    - name: req-052.5 check configuration of logging for selinux
      lineinfile:
        path: '/etc/audit/audit.rules'
        line: '{{ set_selinux_events }}'
        state: present
      register: check_sel_log
      failed_when: (check_sel_log is changed)
  rescue:
    - debug:
        msg: "WARNING: Log events for SELinux are not correct configured!"
  when:
    - set_mac_logging == true
    - config_mac == true
    - use_mac_type == "selinux"
    - check_mac.changed == false
    - check_auditd_installed.changed == true

- block:
    - name: search for privileged commands
      shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f \( -perm -4000 -o -perm -2000 \) -print 2>/dev/null
      register: priv_commands
      changed_when: false
      check_mode: no
    - name: req-052.6 configure logging for priviledged commands
      lineinfile:
        path: '/etc/audit/audit.rules'
        line: '-a always,exit -F path={{ item }} -F perm=x -F auid>=1000 -F auid!=4294967295 -k privileged'
        state: present
      register: check_priv_log
      failed_when: (check_priv_log is changed)
      with_items: '{{ priv_commands.stdout_lines }}'
  rescue:
    - debug:
        msg: "WARNING: Logging for privileged commands is not configured!"
  when: check_auditd_installed.changed == true

- block:
    - name: req-052.7 check if audit configuration is immutable
      lineinfile:
        path: '/etc/audit/audit.rules'
        line: '-e 2'
        state: present
      register: check_log_immutable
      failed_when: (check_log_immutable is changed)
  rescue:
    - debug:
        msg: "WARNING: Audit configuration is not set to immutable in audit.rules file!"
  when: check_auditd_installed.changed == true

# Req 53: Log rotate for logfiles must be configured.

- block:
    - name: req-053.1 check max size for log rotate in auditd.conf
      lineinfile:
        path: '/etc/audit/auditd.conf'
        regexp: '^max_log_file ='
        line: 'max_log_file = {{ set_max_log_file_size }}'
        state: present
      register: check_auditd_maxsize
      failed_when: (check_auditd_maxsize is changed)
  rescue:
    - debug:
        msg: "WARNING: Max size for log rotate is not configured in auditd.conf!"
  when: check_auditd_installed.changed == true

- block:
    - name: req-053.2 check if rotate is enabled for auditd
      lineinfile:
        path: '/etc/audit/auditd.conf'
        regexp: '^max_log_file_action ='
        line: 'max_log_file_action = {{ set_log_file_action }}'
        state: present
      register: check_rotate_action
      failed_when: (check_rotate_action is changed)
  rescue:
    - debug:
        msg: "WARNING: Action for log rotate is not correct configured!"
  when: check_auditd_installed.changed == true

- block:
    - name: req-053.3 check time for log rotate
      lineinfile:
        path: '/etc/logrotate.conf'
        line: '{{ use_rotate_time }}'
        state: present
      register: check_rotate_time
      failed_when: (check_rotate_time is changed)
  rescue:
    - debug:
        msg: "WARNING: Time for log rotate is not configured!"

- block:
    - name: req-053.4 check count for log rotate
      lineinfile:
        path: '/etc/logrotate.conf'
        regexp: '^rotate'
        line: 'rotate {{ use_rotate_count }}'
        state: present
      register: check_rotate_count
      failed_when: (check_rotate_count is changed)
  rescue:
    - debug:
        msg: "WARNING: Count for log rotate is not configured!"

- block:
    - name: req-053.5 check max age for log rotate
      lineinfile:
        path: '/etc/logrotate.conf'
        line: 'maxage {{ use_rotate_maxage }}'
        state: present
      register: check_rotate_maxage
      failed_when: (check_rotate_maxage is changed)
  rescue:
    - debug:
        msg: "WARNING: Max age for log rotate is not configured!"

- block:
    - name: req-053.6 check max size for log rotate
      lineinfile:
        path: '/etc/logrotate.conf'
        line: 'maxsize {{ use_rotate_maxsize }}'
        state: present
      register: check_rotate_maxsize
      failed_when: (check_rotate_maxsize is changed)
  rescue:
    - debug:
        msg: "WARNING: Max size for log rotate is not configured!"

- name: check for all files in directory '/etc/logrotate.d'
  command: ls /etc/logrotate.d
  register: logrotate_files
  changed_when: false
  check_mode: no

- block:
    - name: req-053.7 check count for rotate in files in etc/logrotate.d
      replace:
        path: '/etc/logrotate.d/{{ item }}'
        regexp: '^\s+rotate.*$'
        replace: '  rotate {{ use_rotate_count }}'
      register: check_logrotated_count
      failed_when: (check_logrotated_count is changed)
      with_items: "{{ logrotate_files.stdout_lines }}"
  rescue:
    - debug:
        msg: "WARNING: Count for log rotate is not configured in files in logrotate.d!"

- block:
    - name: req-053.8 rotate time for rotate in files in 'etc/logrotate.d'
      replace:
        path: '/etc/logrotate.d/{{ item }}'
        after: '\s+rotate.*'
        replace: '  {{ use_rotate_time }}'
      register: check_log_time
      failed_when: (check_log_time is changed)
      with_items: "{{ logrotate_files.stdout_lines }}"
  rescue:
    - debug:
        msg: "WARNING: Rotate time is not configured in files in logrotate.d!"

- block:
    - name: req-053.9 check max size for rotate in files in 'etc/logrotate.d'
      shell:  grep "maxsize" /etc/logrotate.d/* | grep -v "{{ use_rotate_maxsize }}"| wc -l
      register: check_log_maxsize
      failed_when: check_log_maxsize.stdout != "0"
      changed_when: false
      check_mode: no
  rescue:
    - debug:
        msg: "WARNING: MaxSize for log rotate is not configured in files in logrotate.d!"

- block:
    - name: req-053.10 check max age for rotate in files in 'etc/logrotate.d'
      shell:  grep "maxage" /etc/logrotate.d/* | grep -v "{{ use_rotate_maxage }}"| wc -l
      register: check_log_maxage
      failed_when: check_log_maxage.stdout != "0"
      changed_when: false
      check_mode: no
  rescue:
    - debug:
        msg: "WARNING: MaxAge for log rotate is not configured in files in logrotate.d!"

# Req 54: Security relevant logging data must be send to an external system
# direct after their creation.

- block:
    - name: req-054.1 check if logging server is installed
      package:
        name: '{{ use_syslog_type }}'
        state: absent
      register: check_log_server
      failed_when: check_log_server.changed == false
      changed_when: false
  rescue:
    - debug:
        msg: "WARNING: {{ use_syslog_type }} is not installed!"

- block:
    - name: req-054.2 check configuration of logging server
      lineinfile:
        dest: '/etc/rsyslog.d/50-default.conf'
        state: present
        line: '*.* @{{ use_logging_server }}:514'
      register: check_logsrv_config
      failed_when: (check_logsrv_config is changed)
  rescue:
    - debug:
        msg: "WARNING: Logging server is not correct configured!"
  when: use_syslog_type == "rsyslog" and check_log_server.changed == true

- block:
    - name: req-054.3 check rsyslog default file permission
      lineinfile:
        path: '/etc/rsyslog.conf'
        state: present
        regexp: '^$FileCreateMode'
        line: '$FileCreateMode 0640'
      register: check_logsrv_permission
      failed_when: (check_logsrv_permission is changed)
  rescue:
    - debug:
        msg: "WARNING: Permission used for log files is not correct configured!"
  when: use_syslog_type == "rsyslog" and check_log_server.changed == true

# Req 55: System time must be synchronized against a reference time source.
# Test your NTP with "$ timedatectl" and "ntpq -p" (Ubuntu)

- block:
    - name: req-055.1 check if ntp is installed
      package:
        name: ntp
        state: absent
      register: check_ntp
      failed_when: check_ntp.changed == false
      changed_when: false
  rescue:
    - debug:
        msg: "WARNING: NTP service is not installed"

- block:
    - name: req-055.2 set time zone
      shell: timedatectl status | grep -i "{{ use_timezone }}" | wc -l
      register: check_timezone
      failed_when: check_timezone.stdout == "0"
      changed_when: false
      check_mode: no
  rescue:
    - debug:
        msg: "WARNING: Timezone of server is not correct!"
  when: check_ntp.changed == true

- block:
    - name: req-055.3 check config in init.d/ntp file
      lineinfile:
        dest: '/etc/init.d/ntp'
        regexp: '^RUNASUSER=(.*)'
        line: 'RUNASUSER=ntp'
      register: check_ntp_initd
      failed_when: (check_ntp_initd is changed)
  rescue:
    - debug:
        ntp: "WARNING: NTP configuration in init.d is not correct!"
  when: check_ntp.changed == true

- block:
    - name: req-055.4 check ntp config file
      stat:
        path: '/etc/ntp.conf'
      register: ntp_status
      failed_when: ntp_status.stat.exists == false
  rescue:
    - debug:
        msg: "WARNING: ntp configuration file not found!"
  when: check_ntp.changed == true

- block:
    - name: req-055.5 check ntp configuration
      lineinfile:
        path: '/etc/ntp.conf'
        line: "server {{ item }}"
        state: present
      register: ntp_srv_check
      failed_when: (ntp_srv_check is changed)
      with_items: "{{ use_ntp_servers }}"
  rescue:
    - debug:
        msg: "WARNING: NTP server configuration is incorrect!"
  when: check_ntp.changed == true and ntp_status.stat.exists == true
